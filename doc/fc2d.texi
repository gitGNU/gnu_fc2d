\input texinfo   @c -*-texinfo-*-
@setfilename fc2d.info
@settitle GNU FC2D user and developer manual

@set UPDATED 02 July 2012
@set UPDATED-MONTH July 2012
@set EDITION 0.1
@set VERSION 0.1

@titlepage
@title GNU FC2D user and developer manual
@subtitle A User's Guide for GNU FC2D
@subtitle July, 2012
@author Fabio J. Gonzalez @email{gonzalfj@@ymail.com}

Copyright @copyright{} 2012
Fabio J. Gonzalez <@email{gonzalfj@@ymail.com}>

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts.  A copy of the license is included in the section entitled ``GNU
Free Documentation License''.

@end titlepage

@ifnottex @c texi2pdf don't understand copying and insertcopying ???
@c modifications must also be done in the titlepage
@copying
Copyright @copyright{} 2012
Fabio J. Gonzalez <@email{gonzalfj@@ymail.com}>

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts.  A copy of the license is included in the section entitled ``GNU
Free Documentation License''.
@end copying
@c WTF does the info get the copying output and the plaintext output not ????
@ifplaintext
@insertcopying
@end ifplaintext
@end ifnottex

@ifnottex
@node Top
@top GNU FC2D User and developer manual
@ifhtml
@insertcopying 
@end ifhtml

GNU FC2D is a programming language that
simulates two temporal dimensions. Great
for creating dynamic programs (the programs
are changed in memory by themselves). The
program GNU FC2D generates C source code
from the source code FC2D.
@end ifnottex

@contents
@menu
* Introduction::
* Solution to temporal paradoxes::
* Developing GNU FC2D::
* Copying this manual::
@end menu

@node Introduction
@chapter Introduction

GNU FC2D is a highly versatile programming language, 
that support two temporal dimensions.
This programming language focuses on the creation of dynamic programs. In
this text, I will introduce you to, temporal dimensions
theory, and how to implement it, in pseudo-code.
Before you start, you is required to understand
some basic  concepts. In a zero-dimensional world,
all geometry, is limited to a single point(can no exist).
If we duplicate this point and connect it with one point
outside it's worlds, and adjacent to it,
we have one-dimensional geometry. @{@cite{[GONZALEZ C G] The point movement generating space}]@}
When we do the same, in a 2D space, we have three-dimensional
geometry
@iftex
(@pxref{fig:spatial-dimensions1})
@end iftex
.
The temporal dimensions theory, comes with
the intuitive visualization of time as
geometry.
@iftex
@float Figure,fig:spatial-dimensions1
@image{dimensions1,160mm,,,jpg}
@caption{An example of spatial dimensions.}
@end float
@end iftex
It's likely you've seen a segment being
used to represent time. In a geometric visualization
of time, each point, represents a condition that is
true or false, and no more. The program trajectory
always is a one-dimensional line. When I say this I
mean the steps of the program when executed

@iftex
(@pxref{fig:time-as-geometry1})
@end iftex

@iftex
@float Figure,fig:time-as-geometry1
@image{time-as-geometry1,,,,jpg}
@caption{Geometric visualization of time.}
@end float
@end iftex
With two temporal dimensions, resume events to points, that is,
conditions that are true or false, is a impossible
task. But despite that, given a finite time(A program terminates
 execution in finite time), we can
project a 2D time, in a 1D line, and it is a @dfn{two-dimensional program}.
The result of it's procedure, is a totaly new program, derived from
knowledge obtained, during execution of all program contents, and
not a singly step. For each condition the program is cloned in memory,
and re-executed, but, in next execution, the variable @dfn{level} is equal to
@dfn{this level}+1. And we test the condition passing it as true. The original
program is what has @dfn{level} zero. We do the same for sucessive program, but all
conditions, that we are testing are true in the tests. If we write a file,
we test whether the level is zero, if the level is greater than zero, write
in a memory clone of file. Only if the level is zero write directly to the
file. The way I use to get this, is by using the conditions:
@table @dfn
@item if never in a function
We setup structure that represents, 
unknown @command{if}, to true.
Re-execute the program, testing in each step,
that change variables values. If the condition
is true, and we are testing inside, the proposed
function, we setup the structure
that represents, unknown @command{if}, to false.
@item if always in a function
We setup structure that represents, 
unknown @command{if}, to true.
Re-execute the program, testing in each step,
that change variables values. If the condition
is false, and we are testing inside, the proposed
function, we set up the structure
that represents, unknown @command{if}, to false.
@item if sometime in a function
We setup structure that represents, 
unknown @command{if}, to false.
Re-execute the program, testing in each step,
that change variables values. If the condition
is true, and we are testing inside, the proposed
function, we set up the structure
that represents, unknown @command{if}, to true.
@end table
This procedure represents only a single step of
a @dfn{two-dimensional program}. This is a very
realistic position, because our universe have a single,
temporal dimension, then we not have a next moment.
The implementation of a @code{while} loop is trivial.
At end of @code{while} block, if the @code{while} loop
condition, not is true, then jump to begin of @code{while}
loop block.
We know that the next moment of time, in a two-dimensional time,
is a not performed reality. This theory,
perfectly describes our work, because, only way,
to modify state of a 2D @code{while} loop, is changing,
the program ( Consider variables as part of the program
 ), then is highly convenient,
for automaticaly generated programs.


@node Developing GNU FC2D
@chapter Developing GNU FC2D

@menu
* Technical view::
* Understanding the source code of FC2D::
@end menu

@node Technical view
@section Technical view

@menu
* Implementing if sometime in single thread application::
@end menu



@node Implementing if sometime in single thread application
@subsection Implementing if sometime in single thread application

Before all, we analyse the @dfn{if sometime in a function} procedure,
in a single thread application, because it is more easier. 
The @dfn{if sometime in a function} procedure, more rarely
left the program in a cycle with duration of infinite time.

@float Algorithm,alg:if-sometime-procedure
@enumerate

@item
Checks shared memory and see if it is a child process.
If it is true, between each pair of instructions,
 put code, to run step 4, in the specified 
@code{function}.

Scans next instruction and try execute it.
If no have next instruction, then @code{return}

@item
If it is a @code{if sometime in function} condition.
Then go to next step, otherwise, go to previous step.

@item
Using shared memory(or something similar),
 notifies child program, to test condition
in shared memory(you can use a stack for
 this job).
Variable @code{level} is in shared memory.
@code{level = level + 1}.
Clone this program and execute it as
 child process(you can use @code{fork()}
 for this job), and wait it ends.
@code{level = level - 1} and Go to step 1.

@item
Check condition specified in shared memory. If it is true,
 set shared variable, to
 true and @code{return}.
@end enumerate
@caption{@dfn{if sometime in a function} procedure}
@end float
In practice, implement it is more complicated.
Probably you need a stack and you need in some time, move data
from stack to local(not shared, it is for this process only)
variables. The stack is used to pieces of code, containing
conditions to test. Each program execution test a single
condition, but, it can dispare other execution(as you see
in pseudo-code). You can see also, it's recursion.

@node Understanding the source code of FC2D
@section Understanding the source code of FC2D
The function @code{}

@node Solution to temporal paradoxes
@chapter Solution to temporal paradoxes

Think about grandfather temporal paradox,
 I go back in time and kill my grandfather,
 before he have some child. Then I never,
 have existed and I neven kill my grandfather.

Like geometry, we can visualize it easily, subtracting one
dimension of problem. It is like thinking: if condition is true,
then the same condition at same moment(of course, no exist time 1D)
is false.

 We can see, if the same object as two different states,
can not be at same time. Then in a 2D-time world, if have two
 distinct temporal lines, it's not can be exist at same time.
Then if I modify the time, is contradictory think, that I can
change my own past, present and future, but, can exist a 
1D temporal line, that the past, present and future as been
 changed.
From deterministic point of view, moments can be deducted, from
 it's past.
Then from deterministic point of view in a 2D-time, 
our past, present, and
 future, can be deducted from others temporal lines, that is the
past in 2D-time world. 

@node Copying this manual
@appendix Copying this manual

@menu
* GNU Free Documentation License::  License for copying this manual
@end menu

@include fdl.texi

@bye
