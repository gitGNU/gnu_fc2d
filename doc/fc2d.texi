\input texinfo   @c -*-texinfo-*-
@setfilename fc2d.info
@settitle GNU FC2D user and developer manual

@set UPDATED 02 July 2012
@set UPDATED-MONTH July 2012
@set EDITION 0.1
@set VERSION 0.1

@titlepage
@title GNU FC2D user and developer manual
@subtitle A User's Guide for GNU FC2D
@subtitle July, 2012
@author Fabio J. Gonzalez @email{gonzalfj@@ymail.com}

Copyright @copyright{} 2012
Fabio J. Gonzalez <@email{gonzalfj@@ymail.com}>

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts.  A copy of the license is included in the section entitled ``GNU
Free Documentation License''.

@end titlepage

@ifnottex @c texi2pdf don't understand copying and insertcopying ???
@c modifications must also be done in the titlepage
@copying
Copyright @copyright{} 2012
Fabio J. Gonzalez <@email{gonzalfj@@ymail.com}>

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts.  A copy of the license is included in the section entitled ``GNU
Free Documentation License''.
@end copying
@c WTF does the info get the copying output and the plaintext output not ????
@ifplaintext
@insertcopying
@end ifplaintext
@end ifnottex

@ifnottex
@node Top, Introduction, (dir), (dir)
@top GNU FC2D User and developer manual
@ifhtml
@insertcopying 
@end ifhtml

GNU FC2D is a programming language that
simulates two temporal dimensions. Great
for creating dynamic programs (the programs
are changed in memory by themselves). The
program GNU FC2D generates C source code
from the source code FC2D.
@end ifnottex

@contents
@menu
* Introduction::                
* Developing GNU FC2D::         
* Solution to temporal paradoxes::  
* Copying this manual::

@detailmenu
 --- The Detailed Node Listing ---

Developing GNU FC2D

* Technical view::              
* Understanding the source code of FC2D::  

Technical view

* Implementing if sometime in single thread application::  
* Implementing 2D ifs::         

Copying this manual

* GNU Free Documentation License::  License for copying this manual

@end detailmenu
@end menu

@node Introduction, Developing GNU FC2D, Top, Top
@chapter Introduction

GNU FC2D is a highly versatile programming language, 
that support two temporal dimensions.
This programming language focuses on the creation of dynamic programs. In
this text, I will introduce you to, temporal dimensions
theory, and how to implement it, in pseudo-code.
Before you start, you is required to understand
some basic  concepts. In a zero-dimensional world,
all geometry, is limited to a single point(can no exist).
If we duplicate this point and connect it with one point
outside it's worlds, and adjacent to it,
we have one-dimensional geometry. @{@cite{[GONZALEZ C G] The point movement generating space}]@}
When we do the same, in a 2D space, we have three-dimensional
geometry
@iftex
(@pxref{fig:spatial-dimensions1})
@end iftex
.
The temporal dimensions theory, comes with
the intuitive visualization of time as
geometry.
@iftex
@float Figure,fig:spatial-dimensions1
@image{dimensions1,160mm,,,jpg}
@caption{An example of spatial dimensions.}
@end float
@end iftex
It's likely you've seen a segment being
used to represent time. In a geometric visualization
of time, each point, represents a condition that is
true or false, and no more. The program trajectory
always is a one-dimensional line. When I say this I
mean the steps of the program when executed

@iftex
(@pxref{fig:time-as-geometry1})
@end iftex

@iftex
@float Figure,fig:time-as-geometry1
@image{time-as-geometry1,,,,jpg}
@caption{Geometric visualization of time.}
@end float
@end iftex
With two temporal dimensions, resume events to points, that is,
conditions that are true or false, is a impossible
task. But despite that, given a finite time(A program terminates
 execution in finite time), we can
project a 2D time, in a 1D line, and it is a @dfn{two-dimensional program}.
The result of it's procedure, is a totaly new program, derived from
knowledge obtained, during execution of all program contents, and
not a singly step. For each condition the program is cloned in memory,
and re-executed, but, in next execution, the variable @dfn{level} is equal to
@dfn{this level}+1. And we test the condition passing it as true. The original
program is what has @dfn{level} zero. We do the same for sucessive program, but all
conditions, that we are testing are true in the tests. If we write a file,
we test whether the level is zero, if the level is greater than zero, write
in a memory clone of file. Only if the level is zero write directly to the
file. The way I use to get this, is by using the conditions:
@table @dfn
@item if never in a function
We setup structure that represents, 
unknown @command{if}, to true.
Re-execute the program, testing in each step,
that change variables values. If the condition
is true, and we are testing inside, the proposed
function, we setup the structure
that represents, unknown @command{if}, to false.
@item if always in a function
We setup structure that represents, 
unknown @command{if}, to true.
Re-execute the program, testing in each step,
that change variables values. If the condition
is false, and we are testing inside, the proposed
function, we set up the structure
that represents, unknown @command{if}, to false.
@item if sometime in a function
We setup structure that represents, 
unknown @command{if}, to false.
Re-execute the program, testing in each step,
that change variables values. If the condition
is true, and we are testing inside, the proposed
function, we set up the structure
that represents, unknown @command{if}, to true.
@end table
This procedure represents only a single step of
a @dfn{two-dimensional program}. This is a very
realistic position, because our universe have a single,
temporal dimension, then we not have a next moment.
The implementation of a @code{while} loop is trivial.
At end of @code{while} block, if the @code{while} loop
condition, not is true, then jump to begin of @code{while}
loop block.
We know that the next moment of time, in a two-dimensional time,
is a not performed reality. This theory,
perfectly describes our work, because, only way,
to modify state of a 2D @code{while} loop, is changing,
the program ( Consider variables as part of the program
 ), then is highly convenient,
for automaticaly generated programs.


@node Developing GNU FC2D, Solution to temporal paradoxes, Introduction, Top
@chapter Developing GNU FC2D

@menu
* Technical view::              
* Understanding the source code of FC2D::  
@end menu

@node Technical view, Understanding the source code of FC2D, Developing GNU FC2D, Developing GNU FC2D
@section Technical view

@menu
* Implementing if sometime in single thread application::  
* Implementing 2D ifs::         
@end menu

You can use FC2D two ways, call the executable to run your
program. Or pass the source code for the function
@code{fc2d_run} for it runs your program. Like an
interpreted language.

Open the file @file{libfc2d/fc2d.c}. Everything starts,
calling @code{fc2d_run}, nobody can use FC2D without calling
that function. That function call command line
@code{gcc -E}, to resolve included files, etc...
Then that function(@code{fc2d_run}), call
@code{fc2d_process( code, len, TRUE );}, to generate C code,
from FC2D code, using a syntax tree generated by
@code{f_make_tree}, it use tokens generated by
@code{f_tokenize}( see @file{libfc2d/fc2d.h}::@code{fToken}
struct ). Then @code{fc2d_process} function put a pointer to
a syntax tree used to generate C code. So the syntax tree
and all tokens should be in shared memory(shmget and shmat).
Then programs developed in FC2D, can get their own source
code, and get pointers to begin(the pointer to that function)and end(the pointer to that function plus, function size).
That pointers are in the tree( see
@file{libfc2d/fc2d.h}::fFunction ).
The pointers to the beginning and end of the function
are validated when the program (in fC2D) runs. Source
code is placed in a function that does this. This task
will be facilitated by already under the tree listing
all functions. Just use the information structure
@code{fFunction}, we need not re-examine all the code.
Then the function @code{fc2d_run}, call @code{gcc} to
make a executable and execute it. The function
@code{fc2d_run} wait's program ends.

@node Implementing if sometime in single thread application, Implementing 2D ifs, Technical view, Technical view
@subsection Implementing if sometime in single thread application
If you want to work in FC2D perhaps most interest you, the
next section.

Before all, we analyse the @dfn{if sometime in a function} procedure,
in a single thread application, because it is more easier. 
The @dfn{if sometime in a function} procedure, more rarely
left the program in a cycle with duration of infinite time.

@float Algorithm,alg:if-sometime-procedure
@enumerate

@item
Checks shared memory and see if it is a child process.
If it is true, between each pair of instructions,
 put code, to run step 4, in the specified 
@code{function}.

Scans next instruction and try execute it.
If no have next instruction, then @code{return}

@item
If it is a @code{if sometime in function} condition.
Then go to next step, otherwise, go to previous step.

@item
Using shared memory(or something similar),
 notifies child program, to test condition
in shared memory(you can use a stack for
 this job).
Variable @code{level} is in shared memory.
@code{level = level + 1}.
Clone this program and execute it as
child process(you can use @code{fork()}
for this job), and wait it ends.
@code{level = level - 1} and Go to step 1.

@item
Check condition specified in shared memory. If it is true,
 set shared variable, to
 true and @code{return}.
@end enumerate
@caption{@dfn{if sometime in a function} procedure}
@end float
In practice, implement it is more complicated.
Probably you need a stack and you need in some time, move data
from stack to local(not shared, it is for this process only)
variables. The stack is used to pieces of code, containing
conditions to test. Each program execution test a single
condition, but, it can dispare other execution(as you see
in pseudo-code). You can see also, it's recursion.

@node Implementing 2D ifs,  , Implementing if sometime in single thread application, Technical view
@subsection Implementing 2D ifs

Most conditions are written that way in the source
 code FC2D: if @{sometime, never, always@} in function_ref.
Per example @code{if sometime in main(x == 3) @{...@}} or
@code{if sometime in this_function(x == 3) @{...@}}
if custom is a especial case, and we use it in that way:
@code{if custom=test_something in this_function(x == 3)
@{...@}}.

We should not concern ourselves with the analysis of the
code. Because the function that generates the tree, already
generated, the appropriate structure with all the
information we need, extracted from the source code.
(see @code{fCondition} structure in libfc2d/fc2d.h).
Now I will introduce you to that structure.
That represents a 2D if: 
@code{if something in some_function (CONDITION) @{BLOCK@}}
@table @code
@item type
The condition(@dfn{something}) type we are testing.
Can be:
@table @code
@item IF_SOMETIME
If sometime in the function @code{func}, ocurs that
condition. That is true when @dfn{CONDITION} is true.
When this occurs the appropriate values ​​are set. The
child whose mission is to test this condition. Set
the appropriate values ​​in the tree (remember that
is shared) and returns.hen this occurs the appropriate
values ​​are set. The child whose mission is to test this
condition. Set the appropriate values ​​in the tree (remember
that is shared) and returns. If the condition is
undetermined until the end of the program, then we know
that it is false (the program should end).
@item IF_NEVER
Similar to @code{IF_SOMETIME}, but when @dfn{CONDITION} is
true, we set the value of @code{result}(in fCondition
structure) if the program ends(when this condition is false
the program returns) we know that condition is true.
@item IF_ALWAYS
Similar to others conditions, it is false when
@dfn{CONDITION} is false, otherwise we know that is true.
@end table

@item result
The result of that condition. @code{COND_NONE}, we not know
yet. @code{COND_TRUE}, condition is true. @code{COND_FALSE},
condition is false.

@item func
The function we test in this condition
(@dfn{some_function}).

@item custom
The function that tests a condition selected by the User.

@item begin
The beginning of the @dfn{BLOCK}. The position of @key{@{}
in token array.

@item end
The end of the @dfn{BLOCK}. The position of @key{@}}
in token array.

@item exp_begin
The beginning of the @dfn{CONDITION}. The position of @key{(}
in token array.

@item exp_end
The end of the @dfn{CONDITION}. The position of @key{)}
in token array

@end table
This same structure is used to adjust the result of ifs.
When the program is rerun to test them. This implies that
the tree needs to be shared, so it can be accessed
throughout the program and all executions (forks) of
the same. This will be a great advantage for the
programmer, because if he wants to modify the program
at runtime (programs that modify themselves), not only
will have access to the source code, but all the
details of the tree well structured and all preprocessed
tokens . Remember that the structure we are seeing this
in the tree, the tokens are also in the tree. I suggest
looking at the source code now(@file{fc2d/fc2d.h}).

@node Understanding the source code of FC2D,  , Technical view, Developing GNU FC2D
@section Understanding the source code of FC2D
The function @code{}

@node Solution to temporal paradoxes, Copying this manual, Developing GNU FC2D, Top
@chapter Solution to temporal paradoxes

Think about grandfather temporal paradox,
 I go back in time and kill my grandfather,
 before he have some child. Then I never,
 have existed and I neven kill my grandfather.

Like geometry, we can visualize it easily, subtracting one
dimension of problem. It is like thinking: if condition is true,
then the same condition at same moment(of course, no exist time 1D)
is false.

 We can see, if the same object as two different states,
can not be at same time. Then in a 2D-time world, if have two
 distinct temporal lines, it's not can be exist at same time.
Then if I modify the time, is contradictory think, that I can
change my own past, present and future, but, can exist a 
1D temporal line, that the past, present and future as been
 changed.
From deterministic point of view, moments can be deducted, from
 it's past.
Then from deterministic point of view in a 2D-time, 
our past, present, and
 future, can be deducted from others temporal lines, that is the
past in 2D-time world. 

@node Copying this manual,  , Solution to temporal paradoxes, Top
@appendix Copying this manual

@menu
* GNU Free Documentation License::  License for copying this manual
@end menu

@include fdl.texi

@bye
